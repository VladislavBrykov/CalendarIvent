{"ast":null,"code":"\"use strict\";\n\nvar indexBy = require(\"lodash.indexby\");\n\nvar collectify = require(\"./util/collectify\");\n\nvar _require = require(\"./util/string\");\n\nvar jsify = _require.jsify;\nvar downcaseFirst = _require.downcaseFirst;\n\nfunction base(resp) {\n  var data = resp.resultSets[0];\n  var headers = data.headers.map(jsify);\n  return collectify(headers, data.rowSet);\n}\n\nfunction general(resp) {\n  return resp.resultSets.reduce(function (ret, set) {\n    var name = downcaseFirst(set.name);\n    ret[name] = collectify(set.headers.map(jsify), set.rowSet);\n    return ret;\n  }, {});\n} // todo make this work identical to update-players.js\n\n\nfunction players(resp) {\n  return base(resp).map(function (player) {\n    var names = player.displayLastCommaFirst.split(\", \").reverse();\n    return {\n      firstName: names[0].trim(),\n      lastName: (names[1] ? names[1] : \"\").trim(),\n      playerId: player.personId,\n      teamId: player.teamId\n    };\n  });\n}\n\nfunction lineups(resp) {\n  function makeLineup(lu) {\n    delete lu.groupSet;\n    lu.playerIds = lu.groupId.split(\" - \").map(Number);\n    return lu;\n  }\n\n  return general(resp).lineups.map(makeLineup);\n}\n\nfunction sportVu(resp) {\n  var temp = general(resp);\n\n  if (temp.length !== 1) {\n    throw new Error(\"Expected sportVu response to have a single result set\");\n  }\n\n  return indexBy(temp[0], \"playerId\");\n}\n\nmodule.exports = {\n  base: base,\n  general: general,\n  players: players,\n  lineups: lineups\n};","map":{"version":3,"sources":["/Users/vladislav/Desktop/react-calendar/node_modules/nba/lib/transforms.js"],"names":["indexBy","require","collectify","_require","jsify","downcaseFirst","base","resp","data","resultSets","headers","map","rowSet","general","reduce","ret","set","name","players","player","names","displayLastCommaFirst","split","reverse","firstName","trim","lastName","playerId","personId","teamId","lineups","makeLineup","lu","groupSet","playerIds","groupId","Number","sportVu","temp","length","Error","module","exports"],"mappings":"AAAA;;AAEA,IAAIA,OAAO,GAAGC,OAAO,CAAC,gBAAD,CAArB;;AAEA,IAAIC,UAAU,GAAGD,OAAO,CAAC,mBAAD,CAAxB;;AAEA,IAAIE,QAAQ,GAAGF,OAAO,CAAC,eAAD,CAAtB;;AAEA,IAAIG,KAAK,GAAGD,QAAQ,CAACC,KAArB;AACA,IAAIC,aAAa,GAAGF,QAAQ,CAACE,aAA7B;;AAEA,SAASC,IAAT,CAAcC,IAAd,EAAoB;AAClB,MAAIC,IAAI,GAAGD,IAAI,CAACE,UAAL,CAAgB,CAAhB,CAAX;AACA,MAAIC,OAAO,GAAGF,IAAI,CAACE,OAAL,CAAaC,GAAb,CAAiBP,KAAjB,CAAd;AACA,SAAOF,UAAU,CAACQ,OAAD,EAAUF,IAAI,CAACI,MAAf,CAAjB;AACD;;AAED,SAASC,OAAT,CAAiBN,IAAjB,EAAuB;AACrB,SAAOA,IAAI,CAACE,UAAL,CAAgBK,MAAhB,CAAuB,UAAUC,GAAV,EAAeC,GAAf,EAAoB;AAChD,QAAIC,IAAI,GAAGZ,aAAa,CAACW,GAAG,CAACC,IAAL,CAAxB;AACAF,IAAAA,GAAG,CAACE,IAAD,CAAH,GAAYf,UAAU,CAACc,GAAG,CAACN,OAAJ,CAAYC,GAAZ,CAAgBP,KAAhB,CAAD,EAAyBY,GAAG,CAACJ,MAA7B,CAAtB;AACA,WAAOG,GAAP;AACD,GAJM,EAIJ,EAJI,CAAP;AAKD,C,CAED;;;AACA,SAASG,OAAT,CAAiBX,IAAjB,EAAuB;AACrB,SAAOD,IAAI,CAACC,IAAD,CAAJ,CAAWI,GAAX,CAAe,UAAUQ,MAAV,EAAkB;AACtC,QAAIC,KAAK,GAAGD,MAAM,CAACE,qBAAP,CAA6BC,KAA7B,CAAmC,IAAnC,EAAyCC,OAAzC,EAAZ;AACA,WAAO;AACLC,MAAAA,SAAS,EAAEJ,KAAK,CAAC,CAAD,CAAL,CAASK,IAAT,EADN;AAELC,MAAAA,QAAQ,EAAE,CAACN,KAAK,CAAC,CAAD,CAAL,GAAWA,KAAK,CAAC,CAAD,CAAhB,GAAsB,EAAvB,EAA2BK,IAA3B,EAFL;AAGLE,MAAAA,QAAQ,EAAER,MAAM,CAACS,QAHZ;AAILC,MAAAA,MAAM,EAAEV,MAAM,CAACU;AAJV,KAAP;AAMD,GARM,CAAP;AASD;;AAED,SAASC,OAAT,CAAiBvB,IAAjB,EAAuB;AACrB,WAASwB,UAAT,CAAoBC,EAApB,EAAwB;AACtB,WAAOA,EAAE,CAACC,QAAV;AACAD,IAAAA,EAAE,CAACE,SAAH,GAAeF,EAAE,CAACG,OAAH,CAAWb,KAAX,CAAiB,KAAjB,EAAwBX,GAAxB,CAA4ByB,MAA5B,CAAf;AACA,WAAOJ,EAAP;AACD;;AACD,SAAOnB,OAAO,CAACN,IAAD,CAAP,CAAcuB,OAAd,CAAsBnB,GAAtB,CAA0BoB,UAA1B,CAAP;AACD;;AAED,SAASM,OAAT,CAAiB9B,IAAjB,EAAuB;AACrB,MAAI+B,IAAI,GAAGzB,OAAO,CAACN,IAAD,CAAlB;;AAEA,MAAI+B,IAAI,CAACC,MAAL,KAAgB,CAApB,EAAuB;AACrB,UAAM,IAAIC,KAAJ,CAAU,uDAAV,CAAN;AACD;;AAED,SAAOxC,OAAO,CAACsC,IAAI,CAAC,CAAD,CAAL,EAAU,UAAV,CAAd;AACD;;AAEDG,MAAM,CAACC,OAAP,GAAiB;AAAEpC,EAAAA,IAAI,EAAEA,IAAR;AAAcO,EAAAA,OAAO,EAAEA,OAAvB;AAAgCK,EAAAA,OAAO,EAAEA,OAAzC;AAAkDY,EAAAA,OAAO,EAAEA;AAA3D,CAAjB","sourcesContent":["\"use strict\";\n\nvar indexBy = require(\"lodash.indexby\");\n\nvar collectify = require(\"./util/collectify\");\n\nvar _require = require(\"./util/string\");\n\nvar jsify = _require.jsify;\nvar downcaseFirst = _require.downcaseFirst;\n\nfunction base(resp) {\n  var data = resp.resultSets[0];\n  var headers = data.headers.map(jsify);\n  return collectify(headers, data.rowSet);\n}\n\nfunction general(resp) {\n  return resp.resultSets.reduce(function (ret, set) {\n    var name = downcaseFirst(set.name);\n    ret[name] = collectify(set.headers.map(jsify), set.rowSet);\n    return ret;\n  }, {});\n}\n\n// todo make this work identical to update-players.js\nfunction players(resp) {\n  return base(resp).map(function (player) {\n    var names = player.displayLastCommaFirst.split(\", \").reverse();\n    return {\n      firstName: names[0].trim(),\n      lastName: (names[1] ? names[1] : \"\").trim(),\n      playerId: player.personId,\n      teamId: player.teamId\n    };\n  });\n}\n\nfunction lineups(resp) {\n  function makeLineup(lu) {\n    delete lu.groupSet;\n    lu.playerIds = lu.groupId.split(\" - \").map(Number);\n    return lu;\n  }\n  return general(resp).lineups.map(makeLineup);\n}\n\nfunction sportVu(resp) {\n  var temp = general(resp);\n\n  if (temp.length !== 1) {\n    throw new Error(\"Expected sportVu response to have a single result set\");\n  }\n\n  return indexBy(temp[0], \"playerId\");\n}\n\nmodule.exports = { base: base, general: general, players: players, lineups: lineups };"]},"metadata":{},"sourceType":"script"}