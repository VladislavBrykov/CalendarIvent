{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = function () {\n  function sliceIterator(arr, i) {\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"]) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n\n    return _arr;\n  }\n\n  return function (arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if (Symbol.iterator in Object(arr)) {\n      return sliceIterator(arr, i);\n    } else {\n      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n    }\n  };\n}();\n\nvar mergeCollections = require(\"./util/merge-collections\");\n\nvar blank = require(\"./util/blank\");\n\nvar stats = require(\"./stats\");\n\nvar pick = require(\"lodash.pick\");\n\nvar TWO_WORD_TEAMS = blank({\n  \"Portland Trail Blazers\": true\n}); // adds location city and short name (i.e. 'Warriors') data to team objects.\n\nfunction addExtraTeamData(team) {\n  team.teamName = team.teamName.trim();\n  var splitted = team.teamName.split(\" \");\n\n  if (TWO_WORD_TEAMS[team.teamName]) {\n    team.simpleName = splitted.splice(-2, 2).join(\" \");\n  } else {\n    team.simpleName = splitted.splice(-1, 1).join();\n  }\n\n  team.location = splitted.join(\" \");\n  return team;\n}\n\nfunction teamInfo() {\n  return Promise.all([stats.teamStats(), stats.teamYears()]).then(function (_ref) {\n    var _ref2 = _slicedToArray(_ref, 2);\n\n    var teamStats = _ref2[0];\n    var teamYears = _ref2[1];\n    return mergeCollections(\"teamId\", teamStats, teamYears).map(function (d) {\n      return addExtraTeamData(pick(d, \"teamId\", \"abbreviation\", \"teamName\"));\n    });\n  });\n}\n\nmodule.exports = teamInfo;","map":{"version":3,"sources":["/Users/vladislav/Desktop/react-calendar/node_modules/nba/lib/team-info.js"],"names":["_slicedToArray","sliceIterator","arr","i","_arr","_n","_d","_e","undefined","_i","Symbol","iterator","_s","next","done","push","value","length","err","Array","isArray","Object","TypeError","mergeCollections","require","blank","stats","pick","TWO_WORD_TEAMS","addExtraTeamData","team","teamName","trim","splitted","split","simpleName","splice","join","location","teamInfo","Promise","all","teamStats","teamYears","then","_ref","_ref2","map","d","module","exports"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; })();\n\nvar mergeCollections = require(\"./util/merge-collections\");\nvar blank = require(\"./util/blank\");\nvar stats = require(\"./stats\");\n\nvar pick = require(\"lodash.pick\");\n\nvar TWO_WORD_TEAMS = blank({\n  \"Portland Trail Blazers\": true\n});\n\n// adds location city and short name (i.e. 'Warriors') data to team objects.\nfunction addExtraTeamData(team) {\n  team.teamName = team.teamName.trim();\n  var splitted = team.teamName.split(\" \");\n  if (TWO_WORD_TEAMS[team.teamName]) {\n    team.simpleName = splitted.splice(-2, 2).join(\" \");\n  } else {\n    team.simpleName = splitted.splice(-1, 1).join();\n  }\n  team.location = splitted.join(\" \");\n  return team;\n}\n\nfunction teamInfo() {\n  return Promise.all([stats.teamStats(), stats.teamYears()]).then(function (_ref) {\n    var _ref2 = _slicedToArray(_ref, 2);\n\n    var teamStats = _ref2[0];\n    var teamYears = _ref2[1];\n\n    return mergeCollections(\"teamId\", teamStats, teamYears).map(function (d) {\n      return addExtraTeamData(pick(d, \"teamId\", \"abbreviation\", \"teamName\"));\n    });\n  });\n}\n\nmodule.exports = teamInfo;"]},"metadata":{},"sourceType":"script"}